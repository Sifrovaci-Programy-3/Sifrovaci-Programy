
verze 1.4 je upravenou verzi 1.3 max, vse zustava v podstate stejne, akorat stim rozdilem, ze verze 1.4
jiz nepouziva matici jako verze predchozi ale pracuje pouze ze streamerem (bude vysvetleno pozdeji) 
a pouziva tzv. virtualni matici 
duvod je ten aby se zrychlilo nacitani souboru klice, ktere ve verzi 1.3 max jiz trvalo nekolik desitek vterin
matice obsahovala 484344 policek, vteto upravene verzi se jiz nenacita do pameti pocitace zbytecne vse
ale program si z tohoto mnozstvi vybira jen to co potrebuje
jednoduse receno to co nevadilo ve verzi 1.2, bylo tochu patrne ve verzi 1.3 lite ale jiz zdrzovalo ve 
verzi 1.3 max je zde v nove verzi 1.4 nahrazeno necim mnohem rychlejsim a efektivnejsim
jak to funguje se nyni pokusim vysvetlit na tomto (pro snazsi pochopeni) velmi zjednodussenem modelu

matice ve verzi 1.3 max mela 3844x126 tedy 484344 policek, kazdy soubor klice ma tedy v teto verzi 484344 radku
a na kazdem radku jednu hodnotu, tyto hodnoty se nacitaji pomoci tzv. streameru, pousupne radek po radku
nacteni vsech 484344 radku trva streameru jen nekolik malo vterin
----
pro jednoduchost si predstavme misto tohoto monstra tutu matici pouze 5x5 polozek

virtualni matice 5x5 policek
01,02,03,04,05
06,07,08,09,10
11,12,13,14,15
16,17,18,19,20
21,22,25,24,25

soubor klice pro tuto matici by byl dlouhy misto 484344 radku pouze 25 radku pod sebou 
cili takto vypada v souboru klice "rozvinuta" matice 5x5 polozek (25 hodnot pod sebou a 25 radku v souboru klice)

01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25

vygeneruje se 5x za sebou random cislo v intervalu 1 az 5 ( 5 protoze polozek na jednom radku je zde prave 5)

prvni nahodne vygenerovane cilso bude napr. rnd=2

otevre se ve steameru nacitani souboru klice
nactou se prvni 2 radky, hodnota prvniho radku ze zahodi a hodnota druheho radku ze preulozi do promene rekneme napr. "X"
takze ted plati ze X[1]=02 (X - hodnota typu pole tzn. indexovana promenna)
dale, na vodorovnim radku v matici 5x5 nahore je vzdy vodorovne 5 policek
takze se spocita 5-(rnd=2)=3
streamer nacte tedy dalsi 3 radky ale tyto radky se opet vypusti zahodi ( tzn. nepreulozi do jine promenne)

nyni kdyby se necetl pomoci streameru jeste jeden radek tak by se streamer nyni nachazel na pozici, prvni hodnota druheho radku
( v souboru klice radek cislo 6) neudela se ale nic, misto toho se vygeneruje dalsi nahodne cislo tedy jiz druhe z peti celkovich
bude to tentokrate rekneme cislo napr. cislo 4, streamer udela tedy 4 kroky a hodnotu posledniho nacteneho radku preda promenne X[2] 
4ta hodnota druheho bloku jak je vydet nahore na matici 5x5 ma hodnotu policka = 09
ted uz plati ze X[1]=02, X[2]=09
v dalsim kroku se dopacita do konce "druheho radku" v cislech pod sebou tentokrate bude ze 5-(rnd=4)=1
stremer udela pomoci while loopu jeden prazdni krok (tzn. hodnotu si necha pro sebe, protoze i funkce stremeru je vlastne hodnota)
vygeneruje se 3ti rnd cislo a takto se pokracuje az do posledniho rnd 5 (ve skutecnem programu 126)

muze to vypadat potom treba takto, 25 radku souboru klice pod sebou ale nyni jiz doplneni o komentar co se delo
otevre se soubor klice ve streameru

01 tento radek streamer nacte ale jeho hodnotu si necha pro sebe (hodnta streameru se meni z kazdym radkem)
02 hodnota tohoto radku (rnd=2) se preulozi do hodnoty X[1]=02; 5-2 = 3 (3x nic do konce prvniho radku v matici 5x5)
03 prazdni krok streameru ( hodnotu radku si necha streamer "pro sebe" )
04 prazdni krok streameru ( hodnotu radku si necha streamer "pro sebe" )
05 prazdni krok streameru ( hodnotu radku si necha streamer "pro sebe" ); zde dalsi, rnd=4 (takze 3x nic a 4tou uloz)
06 nic 
07 nic 
08 nic
09 tato hodnota radku se preulozi do promenne X[2]; rnd=4-1(do konce radku=1
10 prazdni krok streameru; rnd=2 ATD. az do do konce celeho soubru klice
11 
12
13
14
15
16
17
18
19
20
21
22
23
24
25

na konci se streamer uzavre a snim i otevreny soubor klice

nyni tedy bude znamo 5 hodnot ( ve skutecnosti 126 ), se kterych se po jednolivych castech slozi dohromady heslo
takze rekneme ze hodnota 01 bude znak "A"; 09 bude "I" (25 pak bude "Y" )
takze heslo by pak bylo napr. "AI..."
samozdrejme ze znaky v souboru klice nejdou abecedne za sebou jako zde ale jsou generovany nahodne a kazdy klic je jiny

ja myslim ze to nejni nic slozityho, nejdele trvalo ve verzi 1.3 max vlastne vytvoreni prazdni matice
3844x126 policek, ktere zabralo spoustu casu a pak se vlastne pracovalo jen zlomkem tohoto obsahu
takze zbytecnost, ve verzi 1.2 kde bylo 256x126 (32256) policek to bylo otazkou vteriny, zde se to jeste neresilo

ja myslim ze to jasny a ze se me to podarilo vysvetlit a nebudou zadny nejasnosti
jediny rozdil verze 1.4 oproti verzi 1.3 max je tedy ve zpusobu zpracovani obsahu souboru klice
coz znamena, ze klice ver 1.3 max budou fungovat ve verzi 1.4 a archivy *.zip z verze 1.3 pujdou rozzipovat ve v1.4 a naopak
tyto dva programy sjou mezi sebou zcela kompaktibilni, takze lze okamzite prejit z mynule verze na tuto, pouhym prekopirovani
obsahu adresare keys\*.* adresare sha1sum\*.txt a archivu *.zip do teto verze na prislusna mista, totez plati i o adresari doplnky\keys_view\*.txt
ve verzi 1.4 zmizela z pochopitelnych duvodu ikona klice, dale zmizel easter-egg, a pocitadlo casu nacitani klice
program generuj_klic.exe zustal bez uprav a doplnek v adresari doplnky\keys_view\keys_view.exe take zustal puvodni,bez uprav,
zde se pracuje z celim obsahem souboru klice, takze zadne vylepseni zde neni mozne
ctete take soubor  "\doplnky\_testovani_hesla_v1.4\KONECNY VYSLEDKY - ZDE.txt"

15.1.2025 autor


